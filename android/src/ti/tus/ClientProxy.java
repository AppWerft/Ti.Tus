/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.tus;

import java.io.IOException;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;

import io.tus.android.client.*;
import io.tus.java.client.ProtocolException;
import io.tus.java.client.TusClient;
import io.tus.java.client.TusExecutor;
import io.tus.java.client.TusUpload;
import io.tus.java.client.TusUploader;

@Kroll.proxy(creatableInModule = TusModule.class)
public class ClientProxy extends KrollProxy {
	// Standard Debugging variables
	private static final String LCAT = "ExampleProxy";
	private static final boolean DBG = TiConfig.LOGD;
	private KrollFunction callback;
	private String url;
	TusClient client = new TusClient();

	// Constructor
	public ClientProxy() {
		super();
	}

	// Handle creation options
	@Override
	public void handleCreationArgs(KrollModule createdInModule, Object[] args) {
		if (args.length != 2)
			return;
		if (!(args[0] instanceof String))
			return;
		if (!(args[1] instanceof KrollFunction))
			return;
		callback = (KrollFunction) args[1];
		url = (String) args[0];
		initTus();
	}

	private void initTus() {
		TusExecutor executor = new TusExecutor() {
			@Override
			protected void makeAttempt() throws ProtocolException, IOException {
				// First try to resume an upload. If that's not possible we will
				// create a new
				// upload and get a TusUploader in return. This class is
				// responsible for opening
				// a connection to the remote server and doing the uploading.
				TusUploader uploader = client.resumeOrCreateUpload();

				// Upload the file in chunks of 1KB sizes.
				uploader.setChunkSize(1024);

				// Upload the file as long as data is available. Once the
				// file has been fully uploaded the method will return -1
				do {
					// Calculate the progress using the total size of the
					// uploading file and
					// the current offset.
					long totalBytes = upload.getSize();
					long bytesUploaded = uploader.getOffset();
					double progress = (double) bytesUploaded / totalBytes * 100;

					System.out.printf("Upload at %06.2f%%.\n", progress);
				} while (uploader.uploadChunk() > -1);

				// Allow the HTTP connection to be closed and cleaned up
				uploader.finish();

				System.out.println("Upload finished.");
				System.out.format("Upload available at: %s", uploader
						.getUploadURL().toString());
			}
		};
		executor.makeAttempts();

	}
}