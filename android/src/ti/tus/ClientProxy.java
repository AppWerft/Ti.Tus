/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.tus;

import io.tus.android.client.TusPreferencesURLStore;
import io.tus.java.client.ProtocolException;
import io.tus.java.client.TusClient;
import io.tus.java.client.TusExecutor;
import io.tus.java.client.TusUpload;
import io.tus.java.client.TusUploader;

import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiBlob;

import android.content.Context;

@Kroll.proxy(creatableInModule = TusModule.class)
public class ClientProxy extends KrollProxy {
	// Standard Debugging variables
	private static final String LCAT = "ExampleProxy";
	private static final boolean DBG = TiConfig.LOGD;
	private KrollFunction callback;
	private String url;
	private String filename;
	private KrollFunction onLoad;
	private KrollFunction onProgress;
	File file = null;
	TusClient client = new TusClient();

	// Constructor
	public ClientProxy() {
		super();
	}

	// Handle creation options
	@Override
	public void handleCreationDict(KrollDict dict) {
		if (dict.containsKeyAndNotNull("url")) {
			url = dict.getString("url");
		}
		if (dict.containsKeyAndNotNull("file")) {
			Object f = dict.get("file");
			if (f instanceof String) {
				filename = dict.getString("file");
				file = new File(filename);
			} else if (f instanceof TiBlob) {

			}
		}
		if (dict.containsKeyAndNotNull("onload")) {
			if (dict.get("onload") instanceof KrollFunction) {
				onLoad = (KrollFunction) dict.get("onload");
			}
		}
		if (dict.containsKeyAndNotNull("onprogress")) {
			if (dict.get("onprogress") instanceof KrollFunction) {
				onProgress = (KrollFunction) dict.get("onprogress");
			}
		}
		initTus();
	}

	private void initTus() {
		try {
			client.setUploadCreationURL(new URL(url));
		} catch (MalformedURLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		final TusUpload upload = new TusUpload();
		Context ctx = TiApplication.getInstance();
		// Enable resumable uploads by storing the upload URL in the preferences
		// and preserve them after app restarts
		client.enableResuming(new TusPreferencesURLStore(ctx
				.getSharedPreferences("tus", 0)));
		TusExecutor executor = new TusExecutor() {
			@Override
			protected void makeAttempt() throws ProtocolException, IOException {
				// First try to resume an upload. If that's not possible we will
				// create a new
				// upload and get a TusUploader in return. This class is
				// responsible for opening
				// a connection to the remote server and doing the uploading.
				TusUploader uploader = client.resumeOrCreateUpload(upload);

				// Upload the file in chunks of 1KB sizes.
				uploader.setChunkSize(1024);

				// Upload the file as long as data is available. Once the
				// file has been fully uploaded the method will return -1
				do {
					// Calculate the progress using the total size of the
					// uploading file and
					// the current offset.
					long totalBytes = upload.getSize();
					long bytesUploaded = uploader.getOffset();
					double progress = (double) bytesUploaded / totalBytes * 100;
					if (hasListeners("progress")) {
						KrollDict dict = new KrollDict();
						dict.put("progress", progress);
						fireEvent("progress", dict);
					}
				} while (uploader.uploadChunk() > -1);
				uploader.finish();
				if (hasListeners("success")) {
					KrollDict dict = new KrollDict();
					dict.put("success", true);
					dict.put("url", uploader.getUploadURL().toString());
					fireEvent("progress", dict);
				}
			}
		};
		try {
			executor.makeAttempts();
		} catch (ProtocolException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}